import * as database from "./bot/database.js";
import "dotenv/config";
import { LavaPayment } from "./bot/payments.js";
import { processChannelJoinRequest, subscriptionMap } from "./bot/tools.js";
import "./bot/cron/mainCron.js";
import "./bot/server.js";
import { bot } from "./bot/bot.js";

const lavaApi = new LavaPayment(
  process.env.LAVA_SHOP_ID,
  process.env.LAVA_SECRET_KEY,
  process.env.LAVA_SHOP_NAME
);

bot.onText(/\/test/, async (msg) => {
  const chatId = msg.chat.id;
  bot.sendMessage(chatId, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞");
  bot.deleteMessage(chatId, msg.message_id - 1);
});

bot.onText(/\/admin/, async (msg) => {
  const chatId = msg.chat.id;
  if (chatId == process.env.ADMIN_IDS)
    bot.sendMessage(chatId, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", {
      reply_markup: {
        inline_keyboard: [
          [
            {
              text: "–û—Ç—á–µ—Ç –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º",
              callback_data: "Adm_report",
            },
          ],
        ],
      },
    });
});

bot.onText(/\/start/, async (msg) => {
  const chatId = msg.chat.id;
  const userIndb = await database.approveUser(chatId);
  if (!userIndb.userActive) {
    console.log("user in base");
    bot.sendMessage(
      chatId,
      "–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∞, –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ä–µ—Å—É—Ä—Å—É –ø—Ä–µ–æ–±—Ä–µ—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –∑–∞–Ω–æ–≤–æ.",
      {
        reply_markup: {
          inline_keyboard: [
            [
              { text: "1 –ú–ï–°–Ø–¶", callback_data: "buy_subscriptionOne" },
              { text: "2 –ú–ï–°–Ø–¶–ê üî• -5%", callback_data: "buy_subscriptionTwo" },
            ],
            [
              {
                text: "3 –ú–ï–°–Ø–¶–ê üî• -8%",
                callback_data: "buy_subscriptionThree",
              },
              {
                text: "6 –ú–ï–°–Ø–¶–ï–í üî• -15%",
                callback_data: "buy_subscriptionSix",
              },
            ],
            [
              {
                text: "12 –ú–ï–°–Ø–¶–ï–í üî• -20%",
                callback_data: "buy_subscriptionTwelve",
              },
            ],
          ],
        },
      }
    );
  } else {
    bot.sendMessage(
      chatId,
      "üí∞ –ö—É–ø–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª—É!",
      {
        reply_markup: {
          inline_keyboard: [
            [
              { text: "1 –ú–ï–°–Ø–¶", callback_data: "buy_subscriptionOne" },
              { text: "2 –ú–ï–°–Ø–¶–ê üî• -5%", callback_data: "buy_subscriptionTwo" },
            ],
            [
              {
                text: "3 –ú–ï–°–Ø–¶–ê üî• -8%",
                callback_data: "buy_subscriptionThree",
              },
              {
                text: "6 –ú–ï–°–Ø–¶–ï–í üî• -15%",
                callback_data: "buy_subscriptionSix",
              },
            ],
            [
              {
                text: "12 –ú–ï–°–Ø–¶–ï–í üî• -20%",
                callback_data: "buy_subscriptionTwelve",
              },
            ],
          ],
        },
      }
    );
  }
});

bot.on("chat_join_request", async (update) => {
  console.log("–ü–æ–ª—É—á–µ–Ω–∞ –Ω–æ–≤–∞—è –∑–∞—è–≤–∫–∞:", update);
  const statusUser = await database.approveUser(update.user_chat_id);
  if (statusUser.userActive) {
    await processChannelJoinRequest(update, true);
  }
  return;
});

bot.on("callback_query", async (query) => {
  try {
    const sub = subscriptionMap[query.data];
    if (!sub) return;
    const dataInvoice = await lavaApi.createInvoice({
      shopId: process.env.LAVA_SHOP_ID,
      sum: sub.sum,
      orderId: `${query.message.chat.id}_${Date.now()}`,
      expire: 5,
      customFields: query.message.chat.id,
    });
    bot.deleteMessage(query.message.chat.id, query.message.message_id);
    bot.sendMessage(
      query.message.chat.id,
      `üîó –°—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã: ${dataInvoice.data.url}`
    );
  } catch (error) {
    console.log(error);
  }
});
