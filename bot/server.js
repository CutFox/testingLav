
// –ò–º–ø–æ—Ä—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –∏ —Å–µ—Ä–≤–∏—Å–æ–≤
import express from "express";
import "dotenv/config";
import * as database from "./database.js";
import { bot } from "./bot.js";
import { subscriptionMap } from "./tools.js";


// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Express-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
const app = express();
app.use(express.json());

// –¢–µ—Å—Ç–æ–≤—ã–π POST-—ç–Ω–¥–ø–æ–∏–Ω—Ç (–º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞)
app.post("/", (req, res) => {
  res.send("add");
});


// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ —Å—É–º–º–µ
function getAddSubscriberFunc(amount) {
  for (const [key, { sum }] of Object.entries(subscriptionMap)) {
    if (String(sum) === String(amount)) {
      // –ü—Ä–∏–≤–æ–¥–∏–º –∫ –≤–∏–¥—É addSubscriberOneMonth, addSubscriberTwoMonth –∏ —Ç.–¥.
      const funcName = `addSubscriber${key.replace("buy_subscription", "")}Month`;
      if (typeof database[funcName] === "function") {
        return database[funcName];
      }
    }
  }
  return null;
}

// –í–µ–±—Ö—É–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã Lava
app.post("/lava-webhook", async (req, res) => {
  try {
    const { status, custom_fields, amount } = req.body;
    if (status === "success") {
      const addFunc = getAddSubscriberFunc(amount);
      if (!addFunc) {
        // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω —Ç–∞—Ä–∏—Ñ ‚Äî —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        await bot.sendMessage(
          custom_fields,
          `–í –ø—Ä–æ—Ü–µ—Å—Å–µ –æ–ø–ª–∞—Ç—ã –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É ${process.env.SUPPORT}`,
          { parse_mode: "HTML" }
        );
      } else {
        // –£—Å–ø–µ—à–Ω–∞—è –æ–ø–ª–∞—Ç–∞: —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª
        await addFunc(custom_fields);
        await bot
          .sendMessage(custom_fields, "‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É üí™")
          .then((response) => {
            const messageId = response.message_id;
            // –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å –∫–Ω–æ–ø–∫–æ–π –æ–ø–ª–∞—Ç—ã)
            bot.deleteMessage(custom_fields, messageId - 1);
          });
        await bot.sendMessage(custom_fields, process.env.TELEGRAM_CHANNEL_LINK, {
          parse_mode: "HTML",
        });
      }
    }
    res.status(200).send("OK");
  } catch (error) {
    console.error("Webhook error:", error);
    res.status(500).json({ error: "Internal server error" });
  }
});


// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–º –ø–æ—Ä—Ç—É
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω, –ø–æ—Ä—Ç ${PORT}`);
});
