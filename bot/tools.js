
// –ò–º–ø–æ—Ä—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –∏ —Å–µ—Ä–≤–∏—Å–æ–≤
import * as database from "./database.js";
import { bot } from "./bot.js";
import { startOfMonth, endOfMonth, format, startOfWeek, endOfWeek } from "date-fns";
import { LavaPayment } from "./payments.js";
import axios from "axios";


// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è API LavaPayment –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–ª–∞—Ç–µ–∂–∞–º–∏
const lavaApi = new LavaPayment(
  process.env.LAVA_SHOP_ID,
  process.env.LAVA_SECRET_KEY,
  process.env.LAVA_SHOP_NAME
);


/**
 * –î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ –ª–æ–∫–∞–ª—å–Ω—ã–π webhook (—ç–º—É–ª—è—Ü–∏—è —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã)
 * @param {number|string} amount - —Å—É–º–º–∞
 * @param {string|number} custom_fields - –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
 * @returns {Promise<any>} - –æ—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞
 */
export async function addUser(amount, custom_fields) {
  try {
    const response = await axios.post(
      `http://localhost:3000/lava-webhook`,
      {
        amount,
        status: "success",
        custom_fields,
      },
      {
        headers: { "Content-Type": "application/json" },
        timeout: 10000,
      }
    );
    return response.data;
  } catch (error) {
    if (error.response) {
      console.error("Server responded with error:", {
        status: error.response.status,
        data: error.response.data,
      });
      throw new Error(`Server error: ${error.response.status}`);
    } else if (error.request) {
      console.error("No response received:", error.request);
      throw new Error("No response from server");
    } else {
      console.error("Request setup error:", error.message);
      throw new Error("Failed to setup request");
    }
  }
}



// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –¥–∞—Ç (–º–µ—Å—è—Ü, –Ω–µ–¥–µ–ª—è –∏ —Ç.–¥.)
function getInterval(getStart, getEnd, date = new Date()) {
  const firstDay = getStart(date);
  const lastDay = getEnd(date);
  return {
    firstDay,
    lastDay,
    formatted: {
      start: format(firstDay, "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"),
      end: format(lastDay, "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"),
    },
  };
}

const getMonthInterval = (date) => getInterval(startOfMonth, endOfMonth, date);
const getWeekInterval = (date) => getInterval(startOfWeek, endOfWeek, date);

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º, —É –∫–æ—Ç–æ—Ä—ã—Ö —Å–∫–æ—Ä–æ –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è –ø–æ–¥–ø–∏—Å–∫–∞
 */
export async function createNotification() {
  const notifyUsers = await database.dbFindNotificationUsers();
  await Promise.all(
    notifyUsers.map(({ userId }) =>
      bot.sendMessage(
        userId,
        `–ü—Ä–∏–≤–µ—Ç!\n–ù–∞–ø–æ–º–∏–Ω–∞—é, —á—Ç–æ —Å—Ä–æ–∫ —Ç–≤–æ–µ–π –ø–æ–¥–ø–∏—Å–∫–∏ –≤ –º–æ–µ–º –ø–ª–∞—Ç–Ω–æ–º Telegram-–∫–∞–Ω–∞–ª–µ –ø–æ—á—Ç–∏ –∏—Å—Ç–µ–∫.\n` +
          `–ï—Å–ª–∏ —Ç—ã —Ö–æ—á–µ—à—å –∏ –¥–∞–ª—å—à–µ –ø–æ–ª—É—á–∞—Ç—å —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç, —Ç–æ –Ω–µ –∑–∞–±—É–¥—å –ø—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /start\n` +
          `–ï—Å–ª–∏ –∂–µ —Ç—ã —Ä–µ—à–∏—à—å –Ω–µ –ø—Ä–æ–¥–ª–µ–≤–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É, —Ç–æ –≤—Å—ë —Ä–∞–≤–Ω–æ –æ–≥—Ä–æ–º–Ω–æ–µ —Å–ø–∞—Å–∏–±–æ –∑–∞ —Ç–≤–æ—é –ø–æ–¥–¥–µ—Ä–∂–∫—É –∏ –≤—Ä–µ–º—è üí™`,
        { parse_mode: "HTML" }
      )
    )
  );
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–∞—Å—Ç–æ–º–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
 * @param {string} textNotification - —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
 */
export async function createNotificationAdmin(textNotification) {
  const adminNotifyUsers = await database.dbFindNotificationUsersAdmin();
  await Promise.all(
    adminNotifyUsers.map(({ userId }) =>
      bot.sendMessage(userId, textNotification)
    )
  );
}

/**
 * –£–¥–∞–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∫–∞–Ω–∞–ª–∞ (—Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –±–∞–Ω–∞)
 * @param {number|string} chatId - ID –∫–∞–Ω–∞–ª–∞
 * @param {number|string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param {boolean} ban - true, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –∑–∞–±–∞–Ω–∏—Ç—å, –∏–Ω–∞—á–µ –ø—Ä–æ—Å—Ç–æ —É–¥–∞–ª–∏—Ç—å
 * @returns {Promise<boolean>} - true, –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ, –∏–Ω–∞—á–µ false
 */
export async function removeUserFromChannel(chatId, userId, ban = false) {
  try {
    await bot.banChatMember(chatId, userId, { revoke_messages: true });
    if (!ban) {
      await bot.unbanChatMember(chatId, userId, { only_if_banned: true });
    }
    console.log(
      `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} ${ban ? "–∑–∞–±–∞–Ω–µ–Ω" : "—É–¥–∞–ª—ë–Ω"} –∏–∑ –∫–∞–Ω–∞–ª–∞ ${chatId}`
    );
    return true;
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è:", error.message);
    if (error.response?.error_code === 400) {
      console.log("–í–æ–∑–º–æ–∂–Ω–æ, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –Ω–µ –≤ –∫–∞–Ω–∞–ª–µ");
    }
    return false;
  }
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞—è–≤–∫—É –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª (–æ–¥–æ–±—Ä–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ)
 * @param {object} request - –æ–±—ä–µ–∫—Ç –∑–∞—è–≤–∫–∏ Telegram
 * @param {boolean} approve - true –¥–ª—è –æ–¥–æ–±—Ä–µ–Ω–∏—è, false –¥–ª—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
 * @returns {Promise<boolean>} - true, –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ, –∏–Ω–∞—á–µ false
 */
export async function processChannelJoinRequest(request, approve = true) {
  try {
    if (!request.chat || !request.from)
      throw new Error("Invalid join request object");
    const chatId = request.chat.id;
    const userId = request.from.id;
    if (approve) {
      await bot.approveChatJoinRequest(chatId, userId);
      console.log(
        `–ó–∞—è–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} –æ–¥–æ–±—Ä–µ–Ω–∞ –¥–ª—è –∫–∞–Ω–∞–ª–∞ ${chatId}`
      );
      try {
        await bot.sendMessage(
          userId,
          `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ${request.chat.title}!`
        );
      } catch (e) {
        console.log("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ:", e.message);
      }
    } else {
      await bot.declineChatJoinRequest(chatId, userId);
      console.log(
        `–ó–∞—è–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –¥–ª—è –∫–∞–Ω–∞–ª–∞ ${chatId}`
      );
    }
    return true;
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞—è–≤–∫–∏:", error.message);
    if (error.response) {
      if (error.response.error_code === 400) {
        console.log("–ó–∞—è–≤–∫–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç");
      } else if (error.response.error_code === 403) {
        console.log("–ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞—è–≤–æ–∫");
      }
    }
    return false;
  }
}

/**
 * –°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω–Ω—É—é –¥–∞—Ç—É —Å —Ç–µ–∫—É—â–µ–π (–∏–≥–Ω–æ—Ä–∏—Ä—É—è –≤—Ä–µ–º—è)
 * @param {string|Date} date - —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º–∞—è –¥–∞—Ç–∞
 * @returns {number} -1 –µ—Å–ª–∏ –¥–∞—Ç–∞ –≤ –ø—Ä–æ—à–ª–æ–º, 1 –µ—Å–ª–∏ –≤ –±—É–¥—É—â–µ–º, 0 –µ—Å–ª–∏ —Å–µ–≥–æ–¥–Ω—è
 */
export function compareWithCurrentDate(date) {
  const inputDate = new Date(date);
  const currentDate = new Date();
  inputDate.setHours(0, 0, 0, 0);
  currentDate.setHours(0, 0, 0, 0);
  return inputDate < currentDate ? -1 : inputDate > currentDate ? 1 : 0;
}

/**
 * –ö–ª–∞—Å—Å –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç—á—ë—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
 */

/**
 * –ö–ª–∞—Å—Å –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç—á—ë—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
 */
export class Report {
  constructor(
    allUserInbd,
    activeUsersInbd,
    notificateUser,
    userInChannel,
    userThisMonth,
    userThisWeek,
    balance,
    freeze_balance
  ) {
    this.allUserInbd = allUserInbd.length; // –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ë–î
    this.activeUsersInbd = activeUsersInbd.length; // –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    this.notificateUser = notificateUser.length; // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    this.userInChannel = userInChannel - 2; // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –∫–∞–Ω–∞–ª–µ (–º–∏–Ω—É—Å –±–æ—Ç–∞ –∏ –≤–ª–∞–¥–µ–ª—å—Ü–∞)
    this.userThisMonth = userThisMonth.length; // –ù–æ–≤—ã—Ö –∑–∞ –º–µ—Å—è—Ü
    this.userThisWeek = userThisWeek.length; // –ù–æ–≤—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é
    this.balance = balance; // –ë–∞–ª–∞–Ω—Å Lava
    this.freeze_balance = freeze_balance; // –ó–∞–º–æ—Ä–æ–∂–µ–Ω–Ω—ã–π –±–∞–ª–∞–Ω—Å
  }
}

/**
 * –§–æ—Ä–º–∏—Ä—É–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç—á—ë—Ç –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
 * @returns {Promise<Report>} - –æ–±—ä–µ–∫—Ç –æ—Ç—á—ë—Ç–∞
 */

/**
 * –§–æ—Ä–º–∏—Ä—É–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç—á—ë—Ç –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
 * @returns {Promise<Report>} - –æ–±—ä–µ–∫—Ç –æ—Ç—á—ë—Ç–∞
 */
export async function createReportAdmin() {
  const lavaData = await lavaApi.getBalance();
  const { balance, freeze_balance } = lavaData.data;
  const intervalMonth = getMonthInterval();
  const intervalWeek = getWeekInterval();
  const [
    allUserInbd,
    activeUsersInbd,
    notificateUser,
    userInChannel,
    userThisMonth,
    userThisWeek,
  ] = await Promise.all([
    database.dbFindAll(),
    database.dbFindNotificationUsersAdmin(),
    database.dbFindNotificationUsers(),
    bot.getChatMemberCount(process.env.TELEGRAM_CHANNEL_ID),
    database.dbFindIntervalDate(
      intervalMonth.formatted.start,
      intervalMonth.formatted.end
    ),
    database.dbFindIntervalDate(
      intervalWeek.formatted.start,
      intervalWeek.formatted.end
    ),
  ]);
  return new Report(
    allUserInbd,
    activeUsersInbd,
    notificateUser,
    userInChannel,
    userThisMonth,
    userThisWeek,
    balance,
    freeze_balance
  );
}

/**
 * –ö–∞—Ä—Ç–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Ç–∏–ø–æ–≤ –ø–æ–¥–ø–∏—Å–∫–∏ –∏ –∏—Ö —Å—Ç–æ–∏–º–æ—Å—Ç–∏ (–≤–∑—è—Ç–æ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è)
 */
export const subscriptionMap = {
  buy_subscriptionOne: {
    sum: process.env.OneMonth,
  },
  buy_subscriptionTwo: {
    sum: process.env.TwoMonth,
  },
  buy_subscriptionThree: {
    sum: process.env.ThreeMonth,
  },
  buy_subscriptionSix: {
    sum: process.env.SixMonth,
  },
  buy_subscriptionTwelve: {
    sum: process.env.TwelveMonth,
  },
};
